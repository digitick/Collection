<?php

namespace Digitick\Foundation\Collection;

use Digitick\Foundation\Collection\Exception\InvalidArgumentException;
use Digitick\Foundation\Collection\Exception\NotImplementedException;
use Digitick\Foundation\Collection\Exception\OutOfBoundException;

/**
 * This class is used to create a fixed list of elements
 * Class AbstractList
 * @package Digitick\Foundation\Collection
 */
abstract class AbstractList extends \SplFixedArray implements InterfaceList
{
    use TraitCollection {
        indexOf as traitIndexOf;
        contains as traitContains;
    }

    /**
     * AbstractList constructor.
     * @param integer $size The size of the list.
     */
    public function __construct($size = 0)
    {
        parent::__construct($size);
    }

    /**
     * @inheritdoc
     */
    public function addAll(InterfaceCollection $elementCollection)
    {
        if ($elementCollection->isEmpty()) {
            return;
        }

        $currentSize = $this->count();
        $addedSize = $elementCollection->count();
        $newSize = $currentSize + $addedSize;
        $this->setSize($newSize);
        for ($i = $currentSize; $i < $newSize; $i++) {
            $this->add($i, $elementCollection[$i - $currentSize]);
        }

    }

    /**
     * @inheritdoc
     */
    public function add($offset, $element)
    {
        $this->set($offset, $element);
    }

    /**
     * @inheritdoc
     */
    public function set($offset, $element)
    {
        $this->offsetSet($offset, $element);
    }

    public function offsetSet($index, $newval)
    {
        try {
            parent::offsetSet($index, $newval); // TODO: Change the autogenerated stub
        } catch (\RuntimeException $exc) {
            throw $this->buildOutOfBoundException ($index, $exc);
        }
    }

    /**
     * @inheritdoc
     */
    public function clear()
    {
        $size = $this->count();
        for ($i = 0; $i < $size; $i++) {
            $this->remove($i);
        }
        return true;
    }

    /**
     * @inheritdoc
     */
    public function remove($offset)
    {
        try {
            $this->offsetUnset($offset);
        } catch (\RuntimeException $exc) {
            throw $this->buildOutOfBoundException ($offset, $exc);
        }
    }

    /**
     * @inheritdoc
     */
    public function contains($element)
    {
        return $this->traitContains($element, $this);
    }

    /**
     * @inheritdoc
     */
    public function indexOf($element)
    {
        return $this->traitIndexOf($element, $this);
    }

    /**
     * @inheritdoc
     */
    public function containsAll(InterfaceCollection $elementCollection)
    {
        if ($elementCollection->isEmpty()) {
            return true;
        }

        $otherCollectionSize = $elementCollection->count();
        $i = 0;
        $found = true;
        while ($i < $otherCollectionSize && $found) {
            $found = ($this->contains($elementCollection[$i]));
            $i++;
        }

        return $found;
    }

    /**
     * @inheritdoc
     */
    public function isEmpty()
    {
        $isEmpty = true;
        $i = 0;
        $size = $this->count();

        while ($isEmpty && $i < $size) {
            if ($this->offsetExists($i))
                $isEmpty = false;
            $i++;
        }

        return ($isEmpty);
    }

    /**
     * @inheritdoc
     */
    public function removeAll(InterfaceCollection $elementCollection)
    {
        throw new NotImplementedException();
    }

    /**
     * @inheritdoc
     * @return static
     */
    public function subList($fromIndex, $toIndex)
    {
        if ($fromIndex > $toIndex)
            throw new InvalidArgumentException('Parameter $fromIndex (=' . $fromIndex . ') cannot be greater than $toIndex (=' . $toIndex . ')');

        if ($fromIndex >= $this->count() || $toIndex >= $this->count()) {
            throw new OutOfBoundException("Parameters fromIndex or toIndex can not be greater than list size");
        }

        if ($fromIndex < 0 || $toIndex < 0) {
            throw new OutOfBoundException("Parameters fromIndex or toIndex can not be lower than 0");
        }

        $subSize = $toIndex - $fromIndex + 1;
        $subList = new static($subSize);
        $subIndex = 0;
        for ($i = $fromIndex; $i <= $toIndex; $i++) {
            $subList->set($subIndex, $this->get($i));
            $subIndex++;
        }
        return $subList;
    }

    /**
     * @inheritdoc
     */
    public function get($offset)
    {
        return $this->offsetGet($offset);
    }

    public function offsetGet($index)
    {
        try {
            return parent::offsetGet($index); // TODO: Change the autogenerated stub
        } catch (\RuntimeException $exc) {
            throw $this->buildOutOfBoundException ($index, $exc);
        }
    }


    private function buildOutOfBoundException ($offset, \Exception $exc = null) {
        return new OutOfBoundException(OutOfBoundException::buildMessage($offset, 0, $this->count() - 1), 0, $exc);
    }
}
