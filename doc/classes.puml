@startuml

namespace php.SPL #DDDDDD {
    class SplFixedArray {
    }

    interface ArrayAccess {
        + offsetExists (offset)
        + offsetGet (offset)
        + offsetSet (offset, value)
        + offsetUnset (offset)
    }

    interface Iterator {
        + current()
        + next ()
        + key ()
        + valid ()
        + rewind ()
    }
    interface Countable {
        + count()
    }
}

namespace Digitick.Foundation.Collection {

    interface InterfaceCollection {
        + addAll(InterfaceCollection elementCollection)
        + clear()
        + contains(element)
        + containsAll(InterfaceCollection elementCollection)
        + isEmpty()
        + removeAll(interfaceCollection elementCollection)
        + size()
        + toArray()
    }
    php.SPL.Iterator <|-- InterfaceCollection
    php.SPL.Countable <|-- InterfaceCollection

    interface InterfaceList {
        + add(offset, element)
        + remove(offset)
        + get(offset)
        + set(offset, element)
        + indexOf(element)
        + subList(fromIndex, toIndex)
    }

    php.SPL.ArrayAccess <|-- InterfaceList
    InterfaceCollection <|-- InterfaceList

    interface InterfaceSet {
        + add(element)
        + get(element)
        + remove(element)
    }

    InterfaceCollection <|-- InterfaceSet

    abstract class AbstractList
    InterfaceList <|-- AbstractList
    php.SPL.SplFixedArray <|-- AbstractList
    AbstractList <|-- BaseList

    abstract class AbstractTypedList
    AbstractTypedList <|-- IntList
    AbstractTypedList <|-- StringList


    AbstractList <|-- AbstractTypedList

    abstract class AbstractObjectSet {
        # storageArray
        # nextAvailableOffset

        # set(element, data)
    }
    InterfaceSet <|-- AbstractObjectSet

    class BaseObjectSet {
    }

    AbstractObjectSet <|-- BaseObjectSet

    abstract class AbstractScalarSet {
        + DEFAULT_SIZE
        # nextAvailableOffset
        # storageArray
        # increaseSize(quantity=1)
        # decreaseSize(quantity=1)
        # shift(fromOffset)
        # removeOffset(offset)
    }
    InterfaceSet <|-- AbstractScalarSet

    AbstractScalarSet <|-- BaseScalarSet
    AbstractScalarSet <|-- IntScalarSet
    AbstractScalarSet <|-- StringScalarSet


    abstract class AbstractTypedScalarSet {
    }

    abstract class AbstractTypedObjectSet {
    }

    AbstractObjectSet <|-- AbstractTypedObjectSet
    AbstractScalarSet <|-- AbstractTypedScalarSet


    abstract class TraitTypedCollection {
      # {static} CLASSORTYPENAME
      - {static} checkelementType(element)
    }


    TraitTypedCollection <|-- AbstractTypedList
    TraitTypedCollection <|-- AbstractTypedObjectSet

    abstract class TraitCollection {
      - indexOf(element, collectionObject)
      - contains(element, collectionObject)
    }

    TraitCollection <|-- AbstractList
    TraitCollection <|-- AbstractScalarSet
}

@enduml